{"version":3,"sources":["../test/logger.test.ts"],"names":[],"mappings":"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","file":"logger.test.js","sourcesContent":["/**\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { expect } from 'chai';\nimport { spy as Spy } from 'sinon';\nimport { Logger, LogLevel } from '../src/logger';\nimport { setLogLevel } from '../index';\nimport { debug } from 'util';\n\ndescribe('@firebase/logger', () => {\n  const message = 'Hello there!';\n  let client: Logger;\n  const spies = {\n    logSpy: null,\n    infoSpy: null,\n    warnSpy: null,\n    errorSpy: null\n  };\n  /**\n   * Before each test, instantiate a new instance of Logger and establish spies\n   * on all of the console methods so we can assert against them as needed\n   */\n  beforeEach(() => {\n    client = new Logger('@firebase/test-logger');\n\n    spies.logSpy = Spy(console, 'log');\n    spies.infoSpy = Spy(console, 'info');\n    spies.warnSpy = Spy(console, 'warn');\n    spies.errorSpy = Spy(console, 'error');\n  });\n\n  afterEach(() => {\n    spies.logSpy.restore();\n    spies.infoSpy.restore();\n    spies.warnSpy.restore();\n    spies.errorSpy.restore();\n  });\n\n  function testLog(message, channel, shouldLog) {\n    /**\n     * Ensure that `debug` logs assert against the `console.log` function. The\n     * rationale here is explained in `logger.ts`.\n     */\n    channel = channel === 'debug' ? 'log' : channel;\n\n    it(`Should ${\n      shouldLog ? '' : 'not'\n    } call \\`console.${channel}\\` if \\`.${channel}\\` is called`, () => {\n      client[channel](message);\n      expect(\n        spies[`${channel}Spy`] && spies[`${channel}Spy`].called,\n        `Expected ${channel} to ${shouldLog ? '' : 'not'} log`\n      ).to.be[shouldLog ? 'true' : 'false'];\n    });\n  }\n\n  describe('Class instance methods', () => {\n    beforeEach(() => {\n      setLogLevel(LogLevel.DEBUG);\n    });\n    testLog(message, 'debug', true);\n    testLog(message, 'log', true);\n    testLog(message, 'info', true);\n    testLog(message, 'warn', true);\n    testLog(message, 'error', true);\n  });\n\n  describe('Defaults to LogLevel.NOTICE', () => {\n    testLog(message, 'debug', false);\n    testLog(message, 'log', false);\n    testLog(message, 'info', true);\n    testLog(message, 'warn', true);\n    testLog(message, 'error', true);\n  });\n\n  describe(`Doesn't log if LogLevel.SILENT is set`, () => {\n    beforeEach(() => {\n      setLogLevel(LogLevel.SILENT);\n    });\n    testLog(message, 'debug', false);\n    testLog(message, 'log', false);\n    testLog(message, 'info', false);\n    testLog(message, 'warn', false);\n    testLog(message, 'error', false);\n  });\n});\n"]}