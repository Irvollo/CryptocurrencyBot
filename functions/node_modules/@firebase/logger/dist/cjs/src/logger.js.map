{"version":3,"sources":["../src/logger.ts"],"names":[],"mappings":"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","file":"logger.js","sourcesContent":["/**\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * A container for all of the Logger instances\n */\nexport const instances: Logger[] = [];\n\n/**\n * The JS SDK supports 5 log levels and also allows a user the ability to\n * silence the logs altogether.\n *\n * The order is a follows:\n * DEBUG < VERBOSE < INFO < WARN < ERROR\n *\n * All of the log types above the current log level will be captured (i.e. if\n * you set the log level to `INFO`, errors will still be logged, but `DEBUG` and\n * `VERBOSE` logs will not)\n */\nexport enum LogLevel {\n  DEBUG,\n  VERBOSE,\n  INFO,\n  WARN,\n  ERROR,\n  SILENT\n}\n\n/**\n * The default log level\n */\nconst defaultLogLevel: LogLevel = LogLevel.INFO;\n\n/**\n * We allow users the ability to pass their own log handler. We will pass the\n * type of log, the current log level, and any other arguments passed (i.e. the\n * messages that the user wants to log) to this function.\n */\nexport type LogHandler = (\n  loggerInstance: Logger,\n  logType: LogLevel,\n  ...args: any[]\n) => void;\n\n/**\n * The default log handler will forward DEBUG, VERBOSE, INFO, WARN, and ERROR\n * messages on to their corresponding console counterparts (if the log method\n * is supported by the current log level)\n */\nconst defaultLogHandler: LogHandler = (instance, logType, ...args) => {\n  if (logType < instance.logLevel) return;\n  const now = new Date().toISOString();\n  switch (logType) {\n    /**\n     * By default, `console.debug` is not displayed in the developer console (in\n     * chrome). To avoid forcing users to have to opt-in to these logs twice\n     * (i.e. once for firebase, and once in the console), we are sending `DEBUG`\n     * logs to the `console.log` function.\n     */\n    case LogLevel.DEBUG:\n      console.log(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.VERBOSE:\n      console.log(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.INFO:\n      console.info(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.WARN:\n      console.warn(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    case LogLevel.ERROR:\n      console.error(`[${now}]  ${instance.name}:`, ...args);\n      break;\n    default:\n      throw new Error(\n        `Attempted to log a message with an invalid logType (value: ${logType})`\n      );\n  }\n};\n\nexport class Logger {\n  /**\n   * Gives you an instance of a Logger to capture messages according to\n   * Firebase's logging scheme.\n   *\n   * @param name The name that the logs will be associated with\n   */\n  constructor(public name: string) {\n    /**\n     * Capture the current instance for later use\n     */\n    instances.push(this);\n  }\n\n  /**\n   * The log level of the given Logger instance.\n   */\n  private _logLevel = defaultLogLevel;\n  get logLevel(): LogLevel {\n    return this._logLevel;\n  }\n  set logLevel(val: LogLevel) {\n    if (!(val in LogLevel)) {\n      throw new TypeError('Invalid value assigned to `logLevel`');\n    }\n    this._logLevel = val;\n  }\n\n  /**\n   * The log handler for the Logger instance.\n   */\n  private _logHandler: LogHandler = defaultLogHandler;\n  get logHandler(): LogHandler {\n    return this._logHandler;\n  }\n  set logHandler(val: LogHandler) {\n    if (typeof val !== 'function') {\n      throw new TypeError('Value assigned to `logHandler` must be a function');\n    }\n    this._logHandler = val;\n  }\n\n  /**\n   * The functions below are all based on the `console` interface\n   */\n\n  debug(...args) {\n    this._logHandler(this, LogLevel.DEBUG, ...args);\n  }\n  log(...args) {\n    this._logHandler(this, LogLevel.VERBOSE, ...args);\n  }\n  info(...args) {\n    this._logHandler(this, LogLevel.INFO, ...args);\n  }\n  warn(...args) {\n    this._logHandler(this, LogLevel.WARN, ...args);\n  }\n  error(...args) {\n    this._logHandler(this, LogLevel.ERROR, ...args);\n  }\n}\n"]}